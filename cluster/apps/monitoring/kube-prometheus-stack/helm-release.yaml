---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 34.10.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    alertmanager:
      enabled: false
      # config:
      #   global:
      #     resolve_timeout: 5m
      #   receivers:
      #     - name: "null"
      #   route:
      #     group_by: ["alertname", "job"]
      #     group_wait: 30s
      #     group_interval: 5m
      #     repeat_interval: 6h
      #     receiver: "pushover"
      #     routes:
      #       - receiver: "null"
      #         matchers:
      #           - alertname =~ "InfoInhibitor|Watchdog"
      #       - receiver: "pushover"
      #         matchers:
      #           - severity = "critical"
      #         continue: true
      #       - receiver: "nodered"
      #         matchers:
      #           - alertname = "UPSOnBattery"
      #         continue: true
      #   inhibit_rules:
      #     - source_matchers:
      #         - severity = "critical"
      #       target_matchers:
      #         - severity = "warning"
      #       equal: ["alertname", "namespace"]
      # ingress:
      #   enabled: true
      #   pathType: Prefix
      #   ingressClassName: "nginx"
      #   hosts:
      #     - &host "alert-manager.${SECRET_PUBLIC_DOMAIN}"
      #   tls:
      #     - hosts:
      #         - *host
      # alertmanagerSpec:
      #   storage:
      #     volumeClaimTemplate:
      #       spec:
      #         storageClassName: "longhorn"
      #         resources:
      #           requests:
      #             storage: 1Gi
      # prometheus:
      #   monitor:
      #     enabled: true
      #     relabelings:
      #       - action: replace
      #         regex: (.*)
      #         replacement: $1
      #         sourceLabels:
      #           - __meta_kubernetes_pod_node_name
      #         targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - ${SECRET_K8S1_IP}
        - ${SECRET_K8S2_IP}
        - ${SECRET_K8S3_IP}
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: true
      endpoints:
        - ${SECRET_K8S1_IP}
        - ${SECRET_K8S2_IP}
        - ${SECRET_K8S3_IP}
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: true
      endpoints:
        - ${SECRET_K8S1_IP}
        - ${SECRET_K8S2_IP}
        - ${SECRET_K8S3_IP}
    kubeEtcd:
      enabled: true
      endpoints:
        - ${SECRET_K8S1_IP}
        - ${SECRET_K8S2_IP}
        - ${SECRET_K8S3_IP}
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          # external-dns/is-public: "true"
          # external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
            secretName: "prometheus-tls"
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 30Gi
