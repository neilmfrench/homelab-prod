# Name of the tunnel you want to run
tunnel: phx-tunnel
credentials-file: /etc/cloudflared/creds/credentials.json
# Serves the metrics server under /metrics and the readiness server under /ready
metrics: 0.0.0.0:2000
no-autoupdate: true
# The `ingress` block tells cloudflared which local service to route incoming
# requests to. For more about ingress rules, see
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
#
# Remember, these rules route traffic from cloudflared to a local service. To route traffic
# from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
# E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
ingress:
  # The first rule proxies traffic to the httpbin sample Service defined in app.yaml
  # - hostname: vs-vaultwarden-phx.${SECRET_DOMAIN}
  #   service: tcp://volsync-sync-vaultwarden-data.security.svc.cluster.local:22000
  # - hostname: vs-ghost-magazine-db-phx.${SECRET_DOMAIN}
  #   service: ssh://volsync-rsync-dst-ghost-magazine-vs-db-destination.magazine.svc.cluster.local:22
  # - hostname: vs-ghost-magazine-app-phx.${SECRET_DOMAIN}
  #   service: ssh://volsync-rsync-dst-ghost-magazine-vs-app-destination.magazine.svc.cluster.local:22
  # This rule sends traffic to the built-in hello-world HTTP server. This can help debug connectivity
  # issues. If hello.example.com resolves and tunnel.example.com does not, then the problem is
  # in the connection from cloudflared to your local service, not from the internet to cloudflared.
  - hostname: hellocf-phx.${SECRET_DOMAIN}
    service: hello_world
  # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
  - service: http_status:404
